#:import MeshLinePlot kivy.garden.graph.MeshLinePlot

<DropDownCamera>:
    Button:
        text: 'My first Item'
        size_hint_y: None
        height: 44
        on_release: root.select('item1')
    Label:
        text: 'Unselectable item'
        size_hint_y: None
        height: 44
    Button:
        text: 'My second Item'
        size_hint_y: None
        height: 44
        on_release: root.select('item2')
		

<Container>:

	orientation: 'horizontal'

	link_to_btn_camera: btn_camera
	link_to_btn_show_video: btn_show_video
	link_to_slider_delay: slider_delay
	link_to_slider_quality: slider_quality
	link_to_slider_eyes_tuner: slider_eyes_tuner

	link_to_input_yaw: input_yaw
	link_to_input_pitch: input_pitch
	link_to_input_row: input_row

	link_to_input_yaw_top: input_yaw_top
	link_to_input_pitch_top: input_pitch_top
	link_to_input_row_top: input_row_top

	link_to_label_yaw: label_yaw
	link_to_label_pitch: label_pitch
	link_to_label_row: label_row

	link_to_alert_drowsy: alert_drowsy
	link_to_alert_inattentive: alert_inattentive

	link_to_image: image
	link_to_start_stop: start_stop
	link_to_label_fps: label_fps
	link_to_label_ear: label_ear
	link_to_label_head_pose :label_head_pose
	link_to_graph: graph
	link_to_layout: layout
	link_to_checkbox: checkbox
	link_to_checkbox_attention: checkbox_attention
	link_to_spinner: spinner

	BoxLayout:		# menu
		id: layout
		orientation: 'vertical'
		size_hint: None, 1
		size: 500, 300
		canvas:
			Color:
				rgb: 0, 0, 0
			Rectangle:
				size: self.size

		BoxLayout:	# camera
			size_hint: 0.1, 0.1

			Button:
				id: btn_camera
				font_size: '1sp'
				text: 'First Camera'
				on_press: root.on_choose_camera(btn_camera.text)

			Button:
				id: btn_show_video
				font_size: '1sp'
				text: 'Show video'
				on_release: root.on_show_video(btn_show_video.text)

			Button:
				id: start_stop
				font_size: '15sp'
				text: 'Start'
				on_release:
					root.on_start()

		
		
		

		BoxLayout:	# Spinner of selected algorithm
			padding: 10
			size_hint: 1, 0.2

			Label:
				font_size: '15sp'
				text: 'landmark detection algorithm'
			# creating the spinner 
			Spinner: 
				# Assigning id  
				id: spinner 
				# Callback  
				on_text: root.on_spinner_clicked(spinner.text) 
				# initially text on spinner 
				text: "3DFFA_V2"
				# total values on spinner 
				values: ["3DFFA_V2", "Dlib", "E2E video classification"] 
				# declaring size of the spinner 
				# and the position of it 
				pos_hint:{'center_x':.5, 'top': 1} 

		BoxLayout:	# select overlay
			padding: 10
			size_hint: 1, .2

			Label:
				font_size: '15sp'
				text: 'Overlay selection'
				text_size: self.size
				halign: 'left'
				valign: 'center'

			CheckBox:
				canvas.before:
					Color:
						rgb: 1,0,0
				id: checkbox
				active: True
				on_active: root.on_checkbox_click(checkbox.active)
				pos_hint: {"x":0.6, "y":0.4}
				size_hint: 0.05,0.05

		BoxLayout:	# delay
			padding: 10
			size_hint: 1, .2

			Label:
				font_size: '15sp'
				text: 'Time threshold for consecutive closed eyes'
				text_size: self.size
				halign: 'left'
				valign: 'center'

			Slider:
				id: slider_delay
				min: 1
				max: 3
				step: 1
				value: 2
				on_value: root.on_slider_delay(slider_delay.value)			

			Label:
	        	text: str(slider_delay.value) + ' seconds'
	        BoxLayout:
	        	padding: [10, 10, 10, 10]

		BoxLayout:	# quality
			padding: 10
			size_hint: 1, .2

			Label:
				font_size: '15sp'
				text: 'Quality'
				text_size: self.size
				halign: 'left'
				valign: 'center'

			Slider:
				id: slider_quality
				min: 25
				max: 100
				step: 25
				value: 50
				on_value: root.on_slider_quality(slider_quality.value)

			

			Label:
	        	text: str(slider_quality.value) + ' %'
	        BoxLayout:
	        	padding: [10, 10, 10, 10]

		BoxLayout:	# eye_tuner
			padding: 10
			size_hint: 1, .2

			Label:
				font_size: '15sp'
				text: 'EAR threshold'
				text_size: self.size
				halign: 'left'
				valign: 'center'

			Slider:
				id: slider_eyes_tuner
				min: .1
				max: .4
				step: .01
				value: .3
				on_value: root.on_slider_ear(slider_eyes_tuner.value)

			

			Label:
				text: "{:.2f}".format(round(slider_eyes_tuner.value, 2))
	        	#text: str(slider_eyes_tuner.value)
	        BoxLayout:
	        	padding: [10, 10, 10, 10]

		BoxLayout:	# start/stop
			padding: 5
			spacing: 10
			size_hint: 1, .2
			
			

			Label:
				id: label_fps
				font_size: '15sp'
				text: 'fps: 0'

			Label:
				id: label_ear
				font_size: '15sp'
				text: 'ear: 0'

			Label:
				id: label_head_pose
				font_size: '15sp'
				text: 'head pose: 0'


		BoxLayout:	# plot
			padding: 5
			spacing: 10
			size_hint: 1, .2
			

			Label:
				font_size: '15sp'
				text: 'Eyes aspect ration'
				size_hint: .3, 1

			Graph:
				id: graph
				padding: 5
				xmin: 0
				xmax: 100
				ymin: -0.4
				ymax: .4
				size_hint: .7, 1

		BoxLayout:
			padding: 10
			

			BoxLayout:
				orientation: 'vertical'
				Label:
					size_hint: 1, .2
					id: label_yaw
					font_size: '15sp'
					text: 'yaw: 0'
					
				TextInput: 
					id: input_yaw
					hint_text:'bot'
					pos_hint: {'center_x': 0.5, 'center_y': 0.705} 
					size_hint: 0.5, 0.1
					on_focus: root.on_input_attentiveness(input_yaw.text, 'yaw', 'bot')

				TextInput: 
					id: input_yaw_top
					hint_text:'top'
					pos_hint: {'center_x': 0.5, 'center_y': 0.705} 
					size_hint: 0.5, 0.1
					on_focus: root.on_input_attentiveness(input_yaw_top.text, 'yaw', 'top')

			
			BoxLayout:
				orientation: 'vertical'
				Label:
					id: label_pitch
					font_size: '15sp'
					text: 'pitch: 0'
					size_hint: 1, .2

				TextInput: 
					id: input_pitch
					hint_text:'bot'
					pos_hint: {'center_x': 0.5, 'center_y': 0.705} 
					size_hint: 0.5, 0.1
					on_focus: root.on_input_attentiveness(input_pitch.text, 'pitch', 'bot')
				
				TextInput: 
					id: input_pitch_top
					hint_text:'top'
					pos_hint: {'center_x': 0.5, 'center_y': 0.705} 
					size_hint: 0.5, 0.1
					on_focus: root.on_input_attentiveness(input_pitch_top.text, 'pitch', 'top')

			BoxLayout:
				orientation: 'vertical'
				Label:
					id: label_row
					font_size: '15sp'
					text: 'row: 0'
					size_hint: 1, .2

				TextInput: 
					id: input_row
					hint_text:'bot'
					pos_hint: {'center_x': 0.5, 'center_y': 0.705} 
					size_hint: 0.5, 0.1
					on_focus: root.on_input_attentiveness(input_row.text, 'row', 'bot')

				TextInput: 
					id: input_row_top
					hint_text:'top'
					pos_hint: {'center_x': 0.5, 'center_y': 0.705} 
					size_hint: 0.5, 0.1
					on_focus: root.on_input_attentiveness(input_row_top.text, 'row', 'top')	

		BoxLayout:	# select overlay
			padding: 10
			size_hint: 1, .2

			Label:
				font_size: '15sp'
				text: 'Attentiveness alarm'
				text_size: self.size
				halign: 'left'
				valign: 'center'

			CheckBox:
				canvas.before:
					Color:
						rgb: 1,0,0
				id: checkbox_attention
				active: True
				on_active: root.on_checkbox_attention_click(checkbox_attention.active)
				pos_hint: {"x":0.6, "y":0.4}
				size_hint: 0.05, 0.05


		BoxLayout:	# Warning
			padding: 10
			id: alert_drowsy
			size_hint: 1, .35
			canvas:
				Color:
					rgb: 0, 0, 0
				Rectangle:
					size: self.size
			Label:
				font_size: '15sp'
				text: 'drowsiness warning'
				text_size: self.size
				halign: 'left'
				valign: 'center'

		BoxLayout:	# Warning
			padding: 10
			id: alert_inattentive
			size_hint: 1, .35
			canvas:
				Color:
					rgb: 0, 0, 0
				Rectangle:
					size: self.size
			Label:
				font_size: '15sp'
				text: 'inattentive warning'
				text_size: self.size
				halign: 'left'
				valign: 'center'


		

		
	AnchorLayout:
		Image:
			id: image
			size: self.texture_size
			

